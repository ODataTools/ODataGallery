{
  "name": "walkr",
  "description": "Recursive file walking / copying for node with middleware",
  "repository": {},
  "author": {
    "name": "Craig Condon"
  },
  "keywords": [
    "copy"
  ],
  "version": "0.0.3",
  "engines": {},
  "dependencies": {
    "step": "0.0.x",
    "outcome": "0.0.x",
    "mustache": "0.4.x",
    "ejs": "0.6.x",
    "structr": "0.1.x",
    "handlebars": "1.0.x"
  },
  "devDependencies": {},
  "main": "./lib/index.js",
  "readme": "## Recursive file walking / copying for node.js with middleware\n\n## Motivation\n\n- Ability to filter files & directories.\n- Inspired by [dryice](/mozilla/dryice), [findit](/substack/node-findit).\n\n\nCopyr Example:\n\n```javascript\nvar walkFiles = require('walkr'),\nfs            = require('fs'),\nmu            = require('mu'),\ntplData       = {};\n\nwalkFiles(source, destination).\nfilter(/^\\./). //no hidden files AND dirs\nfilterDir(/node_modules/). //no node_modules dir\nfilterFile(function(options, next) {\n\t\n\n\t//template file? parse it, and copy it.\n\tif(options.source.match(/.tpl.html/)) {\n\t\t\n\t\t//after write file, call next. SINCE parameters are given, walkr assumes files were written, so it does\n\t\t//not continue.\n\t\tvar tpl = mu.to_html(fs.readFileSync(options.source, \"utf8\"), tplData);\n\t\treturn fs.writeFile(options.destination, tpl, next);\n\n\t}\n\n\t//call next without parameters \n\treturn next();\n}).\nfilter(walkFiles.copy).\nstart(function(err) {\n\t\n\t//done\n});\n```\n\n\nWalkr Example:\n\n```javascript\nvar walkFiles = require('walkr');\n\nwalkFiles(source).\non('directory', function(ops) {\n\tconsole.log(ops.source);\n}).\non('file', function(ops) {\n\tconsole.log(ops.source);\n}).\nstart(function(err) {\n\t\n});\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "walkr@0.0.3",
  "dist": {
    "shasum": "0369e6e582c03d3f67dcc667681cf2741c6e6159"
  },
  "_from": "walkr@0.0.x",
  "_resolved": "https://registry.npmjs.org/walkr/-/walkr-0.0.3.tgz"
}
